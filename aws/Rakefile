require 'pp'
require 'logger'
require 'aws-sdk'
require 'net/http'
require 'fileutils'

require '../libs/cache.rb'
require '../libs/logger.rb'

require './kms/tasks.rb'
require './lambda/tasks.rb'
require './cloudtrail/tasks.rb'
require './cloudformation/tasks.rb'

LOG = DevOps::Logger.new(STDOUT)

desc "Flush Cache."
task :flush_cache do |t,args|
  DevOps::Cache.flush
end

desc 'Update Bastion IP'
task :update_bastion do
  public_ip = Net::HTTP.get URI "https://api.ipify.org"
  #public_ip = "71.32.37.234"
  LOG.debug(format('RemoteIP: %s', public_ip))

  @cache = DevOps::Cache.new

  filter = [{
    name: 'tag:Application',
    values: ['CTCompute']
  }]
  LOG.debug(filter)

  creds = Aws::SharedCredentials.new
  ec2_client = Aws::EC2::Client.new(region: ENV['AWS_DEFAULT_REGION'], credentials: creds)

  cache_key = format('security_groups_%s_%s_%s', ENV['AWS_DEFAULT_REGION'],
                     ENV['AWS_PROFILE'], ENV['INF_VERSION'])
  groups = @cache.cached_json( cache_key ) do
    ec2_client.describe_security_groups(
      filters: filter
    ).data.to_h.to_json
  end

  if groups['security_groups'].empty?
    LOG.fatal(format('Unable to find SG'))
    exit
  end

  sg = groups['security_groups'].first

  ec2_client.authorize_security_group_ingress(
    group_id: sg['group_id'],
    ip_permissions: [{
      ip_protocol: 'tcp',
      from_port: 22,
      to_port: 22,
      ip_ranges: [{
        cidr_ip: format('%s/32', public_ip)
      }]
    },{
      ip_protocol: 'tcp',
      from_port: 5678,
      to_port: 5678,
      ip_ranges: [{
        cidr_ip: format('%s/32', public_ip)
      }]
    }]
  )
end

desc "Flush Cache."
task :flush_cache do
  DevOps::Cache.flush
end
