{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "DesiredCapacity": {
      "Type": "Number",
      "Default": "1",
      "Description": "Number of instances to launch in your ECS cluster."
    },
    "MaxSize": {
      "Type": "Number",
      "Default": "1",
      "Description": "Maximum number of instances that can be launched in your ECS cluster."
    },

    "InstanceType": {
      "Description": "The EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      //"AllowedValues": [ "t2.micro" ],
      "ConstraintDescription": "You can specify only t2.mirco."
    }
  },

  "Mappings": {
    "AWSRegionToAMI": {
      "us-east-1": { "AMIID": "ami-1924770e" },
      "us-east-2": { "AMIID": "ami-446f3521" },
			"us-west-2": { "AMIID": "ami-56ed4936" }
    }
  },

  "Resources": {

    //"EcsElasticLoadBalancer": {
      //"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      //"Properties": {
        //"Subnets": { "Ref": "Subnets" },
        //"CrossZone": "true",
        //"Listeners": [{
          //"Protocol": "HTTP",
          //"InstancePort": "80",
          //"LoadBalancerPort": "80"
        //}],
        //"HealthCheck": {
          //"Target": "HTTP:80/healthz",
          //"HealthyThreshold": "2",
          //"UnhealthyThreshold": "10",
          //"Interval": "30",
          //"Timeout": "5"
        //},
        //"SecurityGroups": [{ "Ref": "PublicHTTP" }]
      //}
    //},

    "EcsALB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Subnets": { "Ref": "Subnets" },
        "SecurityGroups": [{ "Ref": "PublicHTTP" }],
        "Tags": [{
          "Key": "Role",
          "Value": "KrogebryTest"
        }]
      }
    },

    "EcsTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "Name": { "Ref": "AWS::StackName" },
        "Port": 8080,
        "VpcId": {"Ref" : "VpcId"},
        "Matcher" : { "HttpCode" : "200" },
        "Protocol": "HTTP",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthCheckIntervalSeconds": 30,
        "HealthyThresholdCount": 4,
        "TargetGroupAttributes": [{
          "Key": "deregistration_delay.timeout_seconds",
          "Value": "20"
        }],
        "UnhealthyThresholdCount": 3,
        "Tags" : [
          { "Key" : "key", "Value" : "value" },
          { "Key" : "key2", "Value" : "value2" }
        ]
      }
    },

    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "Port" : "80",
        "Protocol" : "HTTP",
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "EcsTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "EcsALB" }
      }
    },

    "ECSAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MinSize": "1",
        "MaxSize": { "Ref": "MaxSize" },
        "DesiredCapacity": { "Ref": "DesiredCapacity" },
        "AvailabilityZones": { "Ref": "Zones" },
        "VPCZoneIdentifier": { "Ref": "Subnets" },
        "LaunchConfigurationName": { "Ref": "ContainerInstances" }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "ContainerInstances": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "01_add_instance_to_cluster": {
                "command": { "Fn::Sub": "#!/bin/bash\necho ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config\n" }
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n" },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}\nrunas=root\n" }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToAMI", {
              "Ref": "AWS::Region"
            },
            "AMIID"
          ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [{ "Ref": "PublicHTTP" }],
        "InstanceMonitoring": "false",
        "AssociatePublicIpAddress": "true",
        "UserData": {
          "Fn::Base64": { "Fn::Sub": "#!/bin/bash -xe\nyum install -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}\nsleep 0\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}\n"}
        }
      }
    },


"ECSServiceRole": {
  "Type": "AWS::IAM::Role",
  "Properties": {
    "AssumeRolePolicyDocument": {
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "Service": [
              "ecs.amazonaws.com"
            ]
          },
          "Action": [
            "sts:AssumeRole"
          ]
        }
      ]
    },
    "Path": "/",
    "Policies": [
      {
        "PolicyName": "ecs-service",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "ec2:Describe*",
                "ec2:AuthorizeSecurityGroupIngress",
                "elasticloadbalancing:DeregisterTargets",
                "elasticloadbalancing:RegisterTargets"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    ]
  }
},


    "service": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [ "ALBListener", "ECSAutoScalingGroup", "ECSServiceRole", "EcsTargetGroup", "EC2Role" ],
      "Properties": {
        "Cluster": { "Ref": "ECSCluster" },
        "DesiredCount": "1",
        "LoadBalancers": [{
          "ContainerName": "wt-api",
          "ContainerPort": "8080",
          //"LoadBalancerName": { "Ref": "EcsElasticLoadBalancer" }
          //"LoadBalancerName": { "Ref": "EcsALB" }
          //"LoadBalancerName": { "Fn::GetAtt": [ "EcsALB", "LoadBalancerName" ]}
          //"TargetGroupArn" : { "Fn::GetAtt" : [ "EcsALB", "LoadBalancerTargetGroupArn" ]}
          "TargetGroupArn" : { "Ref": "EcsALB" }
        }],
        //"Role": { "Ref": "ECSServiceRole" },
        "Role": "krogebry-test",
        //"Role": { "Fn::GetAtt": [ "ECSServiceRole", "Arn" ]},
        "TaskDefinition": { "Ref": "taskdefinition" }
        //"TaskDefinition": { "Fn::GetAtt": [ "taskdefinition",  }
      }
    }

  },

  "Outputs": {
    "ecsservice": {
      "Value": {
        "Ref": "service"
      }
    },
    "ecscluster": {
      "Value": {
        "Ref": "ECSCluster"
      }
    },
    "taskdef": {
      "Value": {
        "Ref": "taskdefinition"
      }
    }
  }
}
