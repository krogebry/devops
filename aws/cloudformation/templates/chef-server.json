{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "",

  "Parameters": { 
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription": "Must be the VPC Id of an existing Virtual Private Cloud."
    },
    
    "StackVersion": {
      "Type": "String",
      "Description": "Role profile ARN"
    },

    "DevCentralSNSTopicARN": {
      "Type": "String",
      "Description": "ARN for the DC SNS topic."
    },

    "Password": {
      "Type": "String",
      "NoEcho": "true",
      "Description": "Password for the admin user"
    },

    "S3BucketName": {
      "Type": "String",
      "Description": "Role profile ARN"
    },

    "MgtCidr": {
      "Type": "String",
      "Description": "Role profile ARN"
    },

    "Subnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list of an existing subnets in the selected Virtual Private Cloud."
    },

    "Zones": {
      "Type": "List<String>",
      "Description": "The list of AvailabilityZones for your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list if valid EC2 availability zones for the selected Virtual Private Cloud"
    },

    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },

    "ImageId": {
      "Type": "AWS::EC2::Image::Id",
      "Description": "The EC2 Image Id",
      "ConstraintDescription": "must be the name of an existing AMI."
    }
  },

  "Resources": {

    "InstanceSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "Tags": [{
          "Key": "Application",
          "Value": "ChefServer"
        }],
        "VpcId": { "Ref": "VpcId" },
        "GroupDescription": "Enable HTTP access and SSH access",
        "SecurityGroupIngress": [{
          "ToPort": "443",
          "FromPort": "443",
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": { "Ref": "ELBSG" }
        },{
          "CidrIp": { "Ref": "MgtCidr" },
          "ToPort": "443",
          "FromPort": "443",
          "IpProtocol": "tcp"
        }, {
          "CidrIp": { "Ref": "MgtCidr" },
          "ToPort": "22",
          "FromPort": "22",
          "IpProtocol": "tcp"
        }]
      }
    },

 		"ELBSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "Tags": [{
          "Key": "Application",
          "Value": "ChefServer"
        }],
        "GroupDescription": "Enable HTTP access on port 80",
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [ {
          "CidrIp": { "Ref": "MgtCidr" },
          "ToPort": "443",
          "FromPort": "443",
          "IpProtocol": "tcp"
        }]
      }
    },

    "ChefServerASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MinSize": "1",
        "MaxSize": "3",
        "DesiredCapacity": "1",

        "AvailabilityZones": { "Ref": "Zones" },
        "VPCZoneIdentifier": { "Ref": "Subnets" },
        "LoadBalancerNames": [{ "Ref": "InternalELB" },{ "Ref": "ExternalELB"}],
        "LaunchConfigurationName": { "Ref": "ChefServerLC" },
        "NotificationConfigurations": [{
          "TopicARN" : { "Ref" : "DevCentralSNSTopicARN" },
          "NotificationTypes" : [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        }]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": "PT15M",
          "MaxBatchSize": "1",
          "WaitOnResourceSignals": "true",
          "MinInstancesInService": "1"
        }
      }
    },

    "ChefServerLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment": "Bootstrap a new ChefServer instance.",
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "sysstat": []
              }
            },

            "files": {

              "/etc/chef/client.rb": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": { "Fn::Join": ["\n", [
                  "chef_server_url: \"https://chef\"",
                  "log_level :info"
                ]]}
              },

              "/etc/chef/dna.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": { "Fn::Join": ["\n", [
                  "{ \"run_list\": [ \"role[gocd-server]\" ] }"
                ]]}
              },

              "/etc/cfn/cfn-hup.conf": {
                "mode": "000400",
                "owner": "root",
                "group": "root",
                "content": { "Fn::Join": ["", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]}
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  " --stack ", { "Ref": "AWS::StackName" },
                  " --resource ChefServerLC ",
                  " --region ", { "Ref": "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services": {
              "sysvinit": {
                "cfn-hup": { "enabled": "true", "ensureRunning": "true",
                              "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          }
        }
      },

      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "ImageId": { "Ref": "ImageId" },
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash -xe\n",

          "/opt/aws/bin/cfn-init -v ",
          " --stack ", { "Ref": "AWS::StackName" },
          " --resource ChefServerLC ",
          " --region ", { "Ref": "AWS::Region" }, "\n",

          "wget https://packages.chef.io/stable/el/7/chef-server-core-12.10.0-1.el7.x86_64.rpm \n",
          "rpm -i chef-server-core-12.10.0-1.el7.x86_64.rpm \n",
          "chef-server-ctl reconfigure \n",
          "chef-server-ctl user-create bkroger Bryan Kroger bkroger@thoughtworks.com '",{ "Ref": "Password" },"' --filename /etc/chef/bkroger.pem \n",
          "chef-server-ctl org-create devops 'DevOps Central' --association_user bkroger --filename /etc/chef/devops-validator.pem \n",

          "aws s3 cp /etc/chef/bkroger.pem s3://",{ "Ref": "S3BucketName" },"/chef-server/devops/ \n",
          "aws s3 cp /etc/chef/devops-validator.pem s3://",{ "Ref": "S3BucketName" },"/chef-server/devops/ \n",

          "/opt/aws/bin/cfn-signal -e $? ",
          " --stack ", { "Ref": "AWS::StackName" },
          " --resource ChefServerASG ",
          " --region ", { "Ref": "AWS::Region" }, "\n"
        ]]}},
        "InstanceType": "c3.large",
        "SecurityGroups": [{ "Ref": "InstanceSG" }],

        "IamInstanceProfile": { "Ref": "RootInstanceProfile" },
        "AssociatePublicIpAddress": "true"
      }
    },

    "ExternalELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Tags": [{
          "Key": "Version",
          "Value": { "Ref": "StackVersion" }
        },{
          "Key": "Role",
          "Value": "External"
        }],
        "Subnets": { "Ref": "Subnets" },
        "CrossZone": "true",
        "Policies": [{
          "PolicyName" : "ChefServerWebSocketPolicy",
          "PolicyType" : "ProxyProtocolPolicyType",
          "Attributes" : [{ "Name" : "ProxyProtocol", "Value" : "true" }]
        }],
        "Listeners": [{
          "Protocol": "TCP",
          "InstancePort": "443",
          "LoadBalancerPort": "443"
        }],
        "HealthCheck": {
          "Target": "TCP:443",
          "Timeout": "2",
          "Interval": "5",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5"
        },
        "SecurityGroups": [{ "Ref": "ELBSG" }]
      }
    },

    "InternalELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Tags": [{
          "Key": "Version",
          "Value": { "Ref": "StackVersion" }
        },{
          "Key": "Role",
          "Value": "Internal"
        }],
        "Scheme": "internal",
        "Subnets": { "Ref": "Subnets" },
        "Policies": [{
          "PolicyName" : "ChefServerWebSocketPolicy",
          "PolicyType" : "ProxyProtocolPolicyType",
          "Attributes" : [{ "Name" : "ProxyProtocol", "Value" : "true" }]
        }],
        "CrossZone": "true",
        "Listeners": [{
          "Protocol": "TCP",
          "InstancePort": "443",
          "LoadBalancerPort": "443"
        }],
        "HealthCheck": {
          "Target": "TCP:443",
          "Timeout": "2",
          "Interval": "5",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5"
        },
        "SecurityGroups": [{ "Ref": "ELBSG" }]
      }
    },

		"RootRole": {
    	"Type": "AWS::IAM::Role",
      "Properties": {
      	"AssumeRolePolicyDocument": {
        	"Version" : "2012-10-17",
          "Statement": [ {
          	"Effect": "Allow",
            "Principal": { "Service": [ "ec2.amazonaws.com" ] },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/"
      }
    },

    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
          }]
        },
        "Roles": [{ "Ref": "RootRole" }]
      }
    },

    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{ "Ref": "RootRole" }]
      }
    }

  },

  "Outputs": { }
}
