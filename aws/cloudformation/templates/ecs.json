{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "DesiredCapacity": {
      "Type": "Number",
      "Default": "1",
      "Description": "Number of instances to launch in your ECS cluster."
    },
    "MaxSize": {
      "Type": "Number",
      "Default": "1",
      "Description": "Maximum number of instances that can be launched in your ECS cluster."
    },
    "MinSize": {
      "Type": "Number",
      "Default": "1",
      "Description": "Minimum number of instances that can be launched in your ECS cluster."
    },

    "InstanceType": {
      "Description": "The EC2 instance type",
      "Type": "String",
      "Default": "m4.large",
      //"AllowedValues": [ "t2.micro" ],
      "ConstraintDescription": "You can specify only t2.mirco."
    }
  },

  "Mappings": {
    "AWSRegionToAMI": {
      "us-east-1": { "AMIID": "ami-1924770e" },
      "us-east-2": { "AMIID": "ami-446f3521" },
			"us-west-2": { "AMIID": "ami-56ed4936" }
    }
  },

  "Resources": {
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },

    "taskdefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [{
          "Name": "simple-app",
          "Cpu": "10",
          "Essential": "true",
          "Image": "httpd:2.4",
          "Memory": 300,
          "MountPoints": [{
            "ContainerPath": "/usr/local/apache2/htdocs",
            "SourceVolume": "my-vol"
          }],
          "PortMappings": [{
            "HostPort": 8081,
            "ContainerPort": 81
          }]

        }, {
          "Cpu": "10",
          "Name": "wt-api",
          "Image": "krogebry/wt-api:latest",
          "Memory": 300,
          "Essential": "true",
          "LogConfiguration": {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-group": "krogebry-test",
              "awslogs-region": { "Ref": "AWS::Region" },
              "awslogs-stream-prefix": "awslogs-example"
            }
          },
          "MountPoints": [{
            "ContainerPath": "/usr/local/apache2/htdocs",
            "SourceVolume": "my-vol"
          }],
          "PortMappings": [{
            "HostPort": 80,
            "ContainerPort": 8080
          }]

        }, {
          "Name": "busybox",
          "Cpu": 10,
          "Command": [
            "/bin/sh -c \"while true; do echo '<html> <head> <title>Amazon ECS Sample App</title> <style>body {margin-top: 40px; background-color: #333;} </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now running on a container in Amazon ECS.</p>' > top; /bin/date > date ; echo '</div></body></html>' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html ; sleep 1; done\""
          ],
          "EntryPoint": [
            "sh",
            "-c"
          ],
          "Essential": false,
          "Image": "busybox",
          "Memory": 200,
          "VolumesFrom": [{
            "SourceContainer": "simple-app"
          }]

        }],

        "Volumes": [{
          "Name": "my-vol"
        }]
      }
    },


    "EcsALB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Subnets": { "Ref": "Subnets" },
        "SecurityGroups": [{ "Ref": "PublicHTTP" }],
        "Tags": [{
          "Key": "StackName",
          "Value": { "Ref": "AWS::StackName" }
        }]
      }
    },

    "EcsTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "Name": { "Ref": "AWS::StackName" },
        "Port": 80,
        "VpcId": {"Ref" : "VpcId"},
        "Matcher" : { "HttpCode" : "200" },
        "Protocol": "HTTP",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthCheckIntervalSeconds": 30,
        "HealthyThresholdCount": 4,
        //"TargetGroupAttributes": [{
          //"Key": "deregistration_delay.timeout_seconds",
          //"Value": "20"
        //}],
        "UnhealthyThresholdCount": 3,
        "Tags" : [{ 
					"Key" : "StackName", 
					"Value" : { "Ref": "AWS::StackName" }
				}]
      }
    },

    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "Port" : "80",
        "Protocol" : "HTTP",
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "EcsTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "EcsALB" }
      }
    },

    "ECSAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MinSize": { "Ref": "MinSize" },
        "MaxSize": { "Ref": "MaxSize" },
        "DesiredCapacity": { "Ref": "DesiredCapacity" },
        "AvailabilityZones": { "Ref": "Zones" },
        "VPCZoneIdentifier": { "Ref": "Subnets" },
        "LaunchConfigurationName": { "Ref": "ContainerInstances" }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "ContainerInstances": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "01_add_instance_to_cluster": {
                "command": { "Fn::Sub": "#!/bin/bash\necho ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config\n" }
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n" },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}\nrunas=root\n" }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToAMI", {
              "Ref": "AWS::Region"
            },
            "AMIID"
          ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [{ "Ref": "PublicHTTP" }],
        "InstanceMonitoring": "false",
        "AssociatePublicIpAddress": "true",
        "UserData": {
          "Fn::Base64": { "Fn::Sub": "#!/bin/bash -xe\nyum install -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}\nsleep 0\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}\n"}
        }
      }
    },

    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ecs.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "ecs-service",
          "PolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "ec2:Describe*",
                "ec2:AuthorizeSecurityGroupIngress",
                "elasticloadbalancing:DeregisterTargets",
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ec2.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "ecs-instance-service",
          "PolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Poll",
                "ecs:RegisterContainerInstance",
                "ecs:StartTelemetrySession",
                "ecs:Submit*",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{ "Ref": "EC2Role" }]
      }
    },

    "PublicHTTP": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VpcId" },
        "GroupDescription": "Allows public access by HTTP",
        "SecurityGroupIngress": [{
          "CidrIp": "0.0.0.0/0",
          "FromPort": 80,
          "ToPort": 80,
          "IpProtocol": "tcp"
			  },{
          "CidrIp": "0.0.0.0/0",
					"FromPort":"31000",
					"ToPort":"61000",
          "IpProtocol": "tcp"
        },{
          "CidrIp": "172.0.0.0/8",
          "FromPort": 22,
          "ToPort": 22,
          "IpProtocol": "tcp"
        }]
      }
    },

    "service": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [ "ALBListener", "ECSAutoScalingGroup", "ECSServiceRole", "EcsTargetGroup", "EC2Role", "taskdefinition" ],
      "Properties": {
        "Cluster": { "Ref": "ECSCluster" },
        "DesiredCount": "1",
        "LoadBalancers": [{
          "ContainerName": "wt-api",
          "ContainerPort": "8080",
          "TargetGroupArn" : { "Ref": "EcsTargetGroup" }
        }],
        "Role": { "Ref": "ECSServiceRole" },
        "TaskDefinition": { "Ref": "taskdefinition" }
      }
    }

  },

  "Outputs": { }
}
