{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "",

  "Parameters": { 
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription": "Must be the VPC Id of an existing Virtual Private Cloud."
    },
    
    "StackVersion": {
      "Type": "String",
      "Description": "Role profile ARN"
    },

    "InfStackVersion": {
      "Type": "String",
      "Description": "Role profile ARN"
    },

    "ChefServerURL": {
      "Type": "String",
      "Description": "URL for the chef server."
    },

    "ChefEnvName": {
      "Type": "String",
      "Description": "Name for the chef environment."
    },

    "MgtCidr": {
      "Type": "String",
      "Description": "Role profile ARN"
    },

    "S3BucketName": {
      "Type": "String",
      "Description": "Role profile ARN"
    },

    "Subnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list of an existing subnets in the selected Virtual Private Cloud."
    },

    "Zones": {
      "Type": "List<String>",
      "Description": "The list of AvailabilityZones for your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list if valid EC2 availability zones for the selected Virtual Private Cloud"
    },

    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },

    "ImageId": {
      "Type": "AWS::EC2::Image::Id",
      "Description": "The EC2 Image Id",
      "ConstraintDescription": "must be the name of an existing AMI."
    }
  },

  "Resources": {

    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": { "Service": [ "ec2.amazonaws.com" ] },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/"
      }
    },

    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
          }]
        },
        "Roles": [{ "Ref": "InstanceRole" }]
      }
    },

    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{ "Ref": "InstanceRole" }]
      }
    },

    "InstanceSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "Tags": [{
          "Key": "Application",
          "Value": "Vault"
        }],
        "VpcId": { "Ref": "VpcId" },
        "GroupDescription": "Enable HTTP access and SSH access",
        "SecurityGroupIngress": [{
          "ToPort": "8200",
          "FromPort": "8200",
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": { "Ref": "ELBSG" }
        },{
          "CidrIp": { "Ref": "MgtCidr" },
          "ToPort": "22",
          "FromPort": "22",
          "IpProtocol": "tcp"
        }]
      }
    },

 		"ELBSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "Tags": [{
          "Key": "Application",
          "Value": "Vault"
        }],
        "GroupDescription": "Enable HTTP access on port 80",
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [{
          "CidrIp": { "Ref": "MgtCidr" },
          "ToPort": "80",
          "FromPort": "80",
          "IpProtocol": "tcp"
        },{
          "CidrIp": "0.0.0.0/0",
          "ToPort": "80",
          "FromPort": "80",
          "IpProtocol": "tcp"
        }]
      }
    },

    "Vault": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MinSize": "1",
        "MaxSize": "3",
        "DesiredCapacity": "1",
        "AvailabilityZones": { "Ref": "Zones" },
        "VPCZoneIdentifier": { "Ref": "Subnets" },
        "LoadBalancerNames": [{ "Ref": "InternalELB" },{ "Ref": "ExternalELB"}],
        "LaunchConfigurationName": { "Ref": "VaultLC" }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": "PT15M",
          "MaxBatchSize": "1",
          "WaitOnResourceSignals": "true",
          "MinInstancesInService": "1"
        }
      }
    },

    "VaultLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment": "Bootstrap a new Vault instance.",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "vault_install": [
              "chef_base",
              "install_cloudwatch_logs_and_mon_scripts"
            ]
          },

					"install_cloudwatch_logs_and_mon_scripts": {
          	"packages": {
            	"yum": {
              	"unzip": [],
                "perl-DateTime": [],
								"perl-Sys-Syslog": [],
                "perl-libwww-perl": []
              }
            },
            "sources": {
            	"/usr/local": "http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip"
            },
            "files": {
            	"/etc/cron.hourly/cloudwatch-monitoring": {
              	"content": [
                	"*/5 * * * * /usr/local/aws-scripts-mon/mon-put-instance-data.pl --mem-util --mem-used --from-cron"
                ],
                "mode": "000700",
                "owner": "root",
                "group": "root"
              },
              "/usr/local/awslogs-agent-setup.py": {
              	"source": "https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py",
                "mode": "000700",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
            	"01_run_awslogs_agent_setup.py": {
              	"command": {
                	"Fn::Sub": [
                  	"python /usr/local/awslogs-agent-setup.py -n -r ${Region} -c https://s3.amazonaws.com/quickstart-reference/hashicorp/vault/latest/scripts/awslogs-config-file", { 
											"Region": { "Ref": "AWS::Region" }
                    }
                  ]
                }
              },
              "02_make_mon_put_instance_data_exececutable": {
              	"command": "chmod +x /usr/local/aws-scripts-mon/mon-put-instance-data.pl"
              }
            }
          },

          "chef_base": {
          	"packages": {
            	"yum": {
              	"jq": [],
                "sysstat": []
              }
            },

            "files": {
            	"/etc/chef/client.rb": {
              	"mode": "000600",
                "owner": "root",
                "group": "root",
                "content": { "Fn::Join": ["", [
                	"chef_server_url \"https://",{ "Ref": "ChefServerURL" }, "/organizations/devops/\" \n",
                  "validation_client_name \"devops-validator\" \n",
                  "ssl_verify_mode :verify_none \n",
                  "log_location \"/var/log/chef/client.log\" \n",
                  "log_level :info \n"
                ]]}
              },

              "/etc/chef/dna.json": {
              	"mode": "000644",
                "owner": "root",
                "group": "root",
                "content": { "Fn::Join": ["\n", [
                	"{ \"run_list\": [ \"role[vault]\" ] }"
                ]]}
              },

              "/etc/cfn/cfn-hup.conf": {
              	"mode": "000400",
                "owner": "root",
                "group": "root",
                "content": { "Fn::Join": ["", [
                	"[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]}
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
              	"content": { "Fn::Join": ["", [
                	"[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  " --stack ", { "Ref": "AWS::StackName" },
                  " --resource VaultLC ",
                  " --region ", { "Ref": "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services": {
            	"sysvinit": {
              	"cfn-hup": { "enabled": "true", "ensureRunning": "true",
                							"files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          }
        }
      },

      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "ImageId": { "Ref": "ImageId" },
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash -xe\n",

          "/opt/aws/bin/cfn-init -v ",
          " --stack ", { "Ref": "AWS::StackName" },
          " --configsets vault_install",
          " --resource VaultLC ",
          " --region ", { "Ref": "AWS::Region" }, "\n",

          "mkdir -p /var/log/chef \n",

          "KMS_KEY_ID=`aws --region ",{ "Ref": "AWS::Region" }, " kms list-aliases | jq '.Aliases[] | select(.AliasName == \"alias/devopskey_",{ "Ref": "InfStackVersion" },"\")|.AliasArn'|sed 's/\"//g'`\n",
          "aws s3 cp --sse-kms-key-id ${KMS_KEY_ID} --sse 'aws:kms' s3://",{ "Ref": "S3BucketName" },"/chef-server/devops/devops-validator.pem /etc/chef/validation.pem \n",
          "chef-client -j /etc/chef/dna.json -E ",{ "Ref": "ChefEnvName" },"\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          " --stack ", { "Ref": "AWS::StackName" },
          " --resource Vault ",
          " --region ", { "Ref": "AWS::Region" }, "\n"
        ]]}},
        "InstanceType": "c3.large",
        "SecurityGroups": [{ "Ref": "InstanceSG" }],
        "IamInstanceProfile": { "Ref": "RootInstanceProfile" },
        "AssociatePublicIpAddress": "true"
      }
    },

    "ExternalELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
				"Tags": [{
          "Key": "Version",
          "Value": { "Ref": "StackVersion" }
        },{
          "Key": "Name",
          "Value": "Vault"
        },{
          "Key": "Role",
          "Value": "External"
        }],
        "Subnets": { "Ref": "Subnets" },
        "CrossZone": "true",
        "Listeners": [{
          "Protocol": "TCP",
          "InstancePort": "8200",
          "LoadBalancerPort": "80"
        }],
        "HealthCheck": {
          "Target": "HTTP:8200/v1",
          "Timeout": "2",
          "Interval": "5",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5"
        },
        "SecurityGroups": [{ "Ref": "ELBSG" }]
      }
    },

    "InternalELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
				"Tags": [{
          "Key": "Version",
          "Value": { "Ref": "StackVersion" }
        },{
          "Key": "Name",
          "Value": "Vault"
        },{
          "Key": "Role",
          "Value": "Internal"
        }],
        "Scheme": "internal",
        "Subnets": { "Ref": "Subnets" },
        "CrossZone": "true",
        "Listeners": [{
          "Protocol": "HTTP",
          "InstancePort": "8200",
          "LoadBalancerPort": "80"
        }],
        "HealthCheck": {
          "Target": "HTTP:8200/v1",
          "Timeout": "2",
          "Interval": "5",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5"
        },
        "SecurityGroups": [{ "Ref": "ELBSG" }]
      }
    }

  },

  "Outputs": { }
}
